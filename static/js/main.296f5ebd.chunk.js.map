{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","containers/Counter/Counter.js","store/actions/counter.js","store/actions/actionTypes.js","store/actions/result.js","App.js","registerServiceWorker.js","store/utility.js","store/reducers/counter.js","store/reducers/result.js","index.js"],"names":["counterControl","props","react_default","a","createElement","className","onClick","clicked","label","counterOutput","value","Counter","state","counter","counterChangedHandler","action","_this","setState","prevState","_this2","this","CounterOutput_CounterOutput","ctr","CounterControl_CounterControl","onIncrementCounter","onDecrementCounter","onAddToCounter","onSubtractFromCounter","onStoreResult","storedResults","map","strResult","key","id","onDeleteResult","Component","connect","res","results","dispatch","type","payload","result","getState","setTimeout","oldCounter","console","log","saveResult","resultElementId","App","containers_Counter_Counter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","updateObject","oldObject","updatedValues","Object","objectSpread","initialState","reducer","arguments","length","undefined","concat","Date","updatedArray","filter","deleteResult","rootReducer","combineReducers","counterReducer","resultReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","next","thunk","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.296f5ebd.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport * as actionCreators from '../../store/actions/index'\n\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    counterChangedHandler = ( action, value ) => {\n        switch ( action ) {\n            case 'inc':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + 1 } } )\n                break;\n            case 'dec':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - 1 } } )\n                break;\n            case 'add':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + value } } )\n                break;\n            case 'sub':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - value } } )\n                break;\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <CounterOutput value={this.props.ctr} />\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrementCounter} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter} />\n                <CounterControl label=\"Add 5\" clicked={this.props.onAddToCounter} />\n                <CounterControl label=\"Subtract 5\" clicked={this.props.onSubtractFromCounter} />\n                <hr />\n                <button onClick={() => this.props.onStoreResult(this.props.ctr)}>Store Result</button>\n                <ul>\n                    {this.props.storedResults.map(strResult => (\n                        <li key={strResult.id} onClick={() => this.props.onDeleteResult(strResult.id)}>{strResult.value}</li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ctr: state.ctr.counter,\n        storedResults: state.res.results\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrementCounter: () => dispatch(actionCreators.increment()),\n        onDecrementCounter: () => dispatch(actionCreators.decrement()),\n        onAddToCounter: () => dispatch(actionCreators.add(5)),\n        onSubtractFromCounter: () => dispatch(actionCreators.subtract(5)),\n        onStoreResult: (result) => dispatch(actionCreators.storeResult(result)),\n        onDeleteResult: (id) => dispatch(actionCreators.deleteResult(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","import * as actionTypes from './actionTypes'\n\nexport const increment = () => {\n    return {\n        type: actionTypes.INCREMENT\n    }\n}\n\nexport const decrement = () => {\n    return {\n        type: actionTypes.DECREMENT\n    }\n}\n\nexport const add = (value) => {\n    return {\n        type: actionTypes.ADD,\n        payload: value\n    }\n}\n\nexport const subtract = (value) => {\n    return {\n        type: actionTypes.SUBTRACT,\n        payload: value\n    }\n}","export const INCREMENT = 'INCREMENT'\nexport const DECREMENT = 'DECREMENT'\nexport const ADD = 'ADD'\nexport const SUBTRACT = 'SUBTRACT'\nexport const STORE_RESULT = 'STORE_RESULT'\nexport const DELETE_RESULT = 'DELETE_RESULT'\n\n\n// ^^ Outsourcing action types is a great way to eliminate potential errors\n\n","import * as actionTypes from './actionTypes'\n\nexport const saveResult = (res) => {\n    // const updatedResult = res * 2\n    // ^^ this logic can also be placed in a reducer, both are ok, but be consistent\n    return {\n        type: actionTypes.STORE_RESULT,\n        result: res\n    }\n}\n\nexport const storeResult = (res) => {\n    return (dispatch, getState) => {\n        setTimeout(() => {\n            const oldCounter = getState().ctr.counter\n            console.log(oldCounter)\n            dispatch(saveResult(res))\n        }, 2000)\n    }\n}\n\nexport const deleteResult = (resElId) => {\n    return {\n        type: actionTypes.DELETE_RESULT,\n        resultElementId: resElId\n    }\n}","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues\n    }\n}","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../utility'\n\nconst initialState = {\n    counter: 0\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        \n        case actionTypes.INCREMENT:\n            return updateObject(state, {counter: state.counter + 1})\n            // const newState = Object.assign({}, state)\n            // newState.counter = state.counter + 1\n            // return newState\n            // ^^Copy the old state, clone the old object in an immmutable way, but is technically a different object\n            // All the properties of the old object but is a new object, import due to the way objects and array work in JS with primitive types and reference types\n        case actionTypes.DECREMENT:\n            return updateObject(state, {counter: state.counter - 1})\n            // return {\n            //     ...state,\n            //     counter: state.counter - 1\n                // ^^ an easier way of accomplishing the above is to disribute the old state using the spread operator ...\n            // }\n        case actionTypes.ADD:\n            return updateObject(state, {counter: state.counter + action.payload})\n            \n        case actionTypes.SUBTRACT:\n            return updateObject(state, {counter: state.counter - action.payload})\n    }\n    return state\n}\n\nexport default reducer","import * as actionTypes from '../actions/actionTypes'\nimport { updateObject } from '../utility'\n\nconst initialState = {\n    results: []\n}\n\nconst deleteResult = (state, action) => {\n    const updatedArray = state.results.filter(result => result.id !== action.resultElementId)\n    return updateObject(state, { results: updatedArray })\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        \n        case actionTypes.STORE_RESULT:\n            // Example of changing the stored data below, multiplying the result by 2\n\n            return updateObject(state, {results: state.results.concat({ id: new Date(),value: action.result * 2 })})\n            \n            // return {\n            //     ...state,\n            //     results: state.results.concat({id: new Date(),value: action.result * 2})\n            //     // ^^concat returns a new array, which is the old array plus the new item, an immutable way to do this, i.e. .push would not work here\n            // }\n\n        case actionTypes.DELETE_RESULT:\n            // const id = 2\n            // const newArray = [...state.results]\n            // newArray.splice(id, 1)\n\n            // const updatedArray = state.results.filter(result => result.id !== action.resultElementId)\n            // return updateObject(state, { results: updatedArray })\n            \n            // return {\n            //     ...state,\n            //     results: updatedArray\n            // }\n            // ^^ delete elements immutably with filter\n\n            return deleteResult(state, action)\n    }\n    return state\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, combineReducers, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport counterReducer from './store/reducers/counter'\nimport resultReducer from './store/reducers/result'\n\nconst rootReducer = combineReducers({\n    ctr: counterReducer,\n    res: resultReducer\n})\n\nconst logger = store => {\n    return next => {\n        return action => {\n            console.log('[Middleware] Dispatching', action)\n            const result = next(action)\n            console.log('[Middleware] next state', store.getState())\n            return result\n        }\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger, thunk)))\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}